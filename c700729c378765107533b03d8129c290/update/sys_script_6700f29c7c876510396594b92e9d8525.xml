<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_ow_credit_0_expense_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_snc_ow_credit_0_expense_request">work_notesVALCHANGES^ORcommentsVALCHANGES^ORassigned_toVALCHANGES^ORstateCHANGESTO10^EQ<item endquery="false" field="work_notes" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="comments" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="false" field="assigned_to" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item display_value="Canceled" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="10"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Work note/Comment/Assigned to changes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    var userArray = [];
    var preAssigned = previous.assigned_to;
    var curAssigned = current.assigned_to;
    var preState = previous.state;
    var curState = current.state;
    var isTeamManager = false;
    var isManager = current.opened_by.manager;
    var grp = new GlideRecord("sys_user_group");
    grp.addQuery("name", "x_snc_ow_credit_0-Budget Reviewers");
    grp.query();
    if (grp.next()) {
        isTeamManager = (grp.manager == curAssigned);
    }
    if (current.assigned_to != '') {
        userArray.push(current.assigned_to);
    } else {
        var gr = new GlideRecord('sys_user_grmember');
        gr.addQuery('group.name', '=', 'x_snc_ow_credit_0-Budget Reviewers');
        gr.query();
        while (gr.next()) {
            userArray.push(gr.user.toString());
        }
    }

    if (current.work_notes.changes()) {
        for (var i = 0; i < userArray.length; i++) {
            var grUser = new GlideRecord('sys_user');
            grUser.addQuery('sys_id', '=', userArray[i]);
            grUser.query();
            if (grUser.next()) {
                gs.eventQueue('x_snc_ow_credit_0.work_note_added', current, grUser.email, grUser.name);
            }
        }
    }
    if (current.comments.changes()) {
        userArray.push(current.opened_by);
        var watchLists = current.watch_list.toString().split(',');
        if (watchLists.length > 0) {
            for (var k = 0; k < watchLists.length; k++) {
            userArray.push(watchLists[k]);
            }
        }
        for (var j = 0; j < userArray.length; j++) {
            var grUsers = new GlideRecord('sys_user');
            grUsers.addQuery('sys_id', '=', userArray[j]);
            grUsers.query();
            if (grUsers.next()) {
                gs.eventQueue('x_snc_ow_credit_0.comment_added', current, grUsers.email, grUsers.name);
            }
        }
    }
    if (preAssigned != curAssigned && curAssigned != '') {
        if ((isManager == curAssigned) || (isTeamManager && preAssigned == isManager)) {
            gs.eventQueue('x_snc_ow_credit_0.request_assigned', current, '', '');
        } else {
            gs.eventQueue('x_snc_ow_credit_0.request_reassigned', current, '', '');
        }
    }
    if (current.state == 10) {
        var approvalgr = new GlideRecord('sysapproval_approver');
        approvalgr.addQuery('document_id', current.sys_id);
        approvalgr.query();
        while (approvalgr.next()) {
            approvalgr.state = 'not_required';
            approvalgr.update();
        }
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-22 22:42:04</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6700f29c7c876510396594b92e9d8525</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Work note/Comment/Assigned to changes</sys_name>
        <sys_overrides/>
        <sys_package display_value="OW Credit Limit Application" source="x_snc_ow_credit_0">c700729c378765107533b03d8129c290</sys_package>
        <sys_policy/>
        <sys_scope display_value="OW Credit Limit Application">c700729c378765107533b03d8129c290</sys_scope>
        <sys_update_name>sys_script_6700f29c7c876510396594b92e9d8525</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-22 22:42:04</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6700f29c7c876510396594b92e9d8525"/>
</record_update>
